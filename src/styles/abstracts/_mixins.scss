@import 'variables';

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// MEDIA QUERY MANAGER
/*
0 - 600px: Phone
600 - 900px: Tablet portrait
900 - 1200px: Tablet landscape
[1200 - 1800]: Normal styles apply
1800 +: Big desktop
$breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop
ORDER: Base + typography -> general Layout + grid -> page layout -> components
Using em on media queries is best practice https://zellwk.com/blog/media-query-units/
1em = 16 px
 */

@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) { @content }; //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) { @content }; //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) { @content }; //1200px
  }
  @if $breakpoint == large-desktop {
    @media only screen and (min-width: 93.75em) { @content }; //1500px
  }
  @if $breakpoint == x-large-desktop {
    @media only screen and (min-width: 112.5em) { @content }; //1800px
  }
}

@mixin respond-min($breakpoint) {
  @if $breakpoint == tab-port {
    @media only screen and (min-width: 37.5em) { @content }; //600px
  }
  @if $breakpoint == tab-land {
    @media only screen and (min-width: 56.25em) { @content }; //900px
  }
  @if $breakpoint == desktop {
    @media only screen and (min-width: 75em) { @content }; //1200px
  }
  @if $breakpoint == large-desktop {
    @media only screen and (min-width: 93.75em) { @content }; //1500px
  }
  @if $breakpoint == x-large-desktop {
    @media only screen and (min-width: 112.5em) { @content }; //1800px
  }
}

//theme implementation
@mixin themify($themes) {
  @each $theme, $map in $themes {
    //create class selector for each theme ex: .theme-dark .applied-element {}
    .theme-#{$theme} & {
      $theme-map: () !global;
      //loop through and create a map for each theme color
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }
      //will use the themed function here
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin keys($animationName) {
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin animation($str) {
  animation: #{$str};
}
